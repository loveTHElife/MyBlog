import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as n,b as i}from"./app-B9xeI2rF.js";const a={},l=i(`<h2 id="单链表的定义" tabindex="-1"><a class="header-anchor" href="#单链表的定义"><span>单链表的定义</span></a></h2><p>线性表的链式存储又称单链表。对每个结点，除存放自身数据外，还需要存放一个指向其后继的指针。 通常用头指针来标识一个单链表，头指针为null时表示一个空表。为了操作上的方便，在单链表第一个结点之前附加一个结点，成为头结点。头结点数据域可以不存任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个结点。</p><h2 id="单链表的基本操作" tabindex="-1"><a class="header-anchor" href="#单链表的基本操作"><span>单链表的基本操作</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1. 头插法
    步骤1. 创建新结点，新结点的指针域指向null。
    步骤2. 将新结点插入到头结点之后，头结点的指针域指向新结点。
2. 尾插法
    步骤1. 创建新结点，新结点的指针域指向null。
    步骤2. 尾结点的指针域指向新结点
3. 按序号查找指定值
    步骤1. 创建计数器
    步骤2. 从第一个节点比较，若计数器和序号相等，返回该结点
3. 按值查找序号
    步骤1. 依次比较指定值和每个结点的数据域，若相等，则返回该结点
4. 删除结点
    步骤1. 检查删除位置是否有效
    步骤2. 查找删除位置的前驱结点i-1，该结点的指针指向i+1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双链表的基本操作" tabindex="-1"><a class="header-anchor" href="#双链表的基本操作"><span>双链表的基本操作</span></a></h2><p>单链表结点中只有一个指向其后继的指针，所以单链表只能从头结点依次顺序的向后遍历。 为了方便访问前驱结点，在结点中引入前驱指针，称为双链表。 双链表结点中除了包含数据域和后继指针域外，还包含一个前驱指针域。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>1. 插入操作
    步骤1. 创建新结点，新结点的后继指针指向后继元素s，前驱结点指向前驱元素p。
    步骤2. s的前驱指针指向新结点，p元素的后继指针指向新结点。
2. 删除操作
    步骤1. 检查删除位置是否有效
    步骤2. 查找删除位置的前驱结点i-1，将i-1的后继指针指向i+1，i+1的前驱指针指向i-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环链表的基本操作" tabindex="-1"><a class="header-anchor" href="#循环链表的基本操作"><span>循环链表的基本操作</span></a></h2><p>循环链表的尾结点的指针域指向头结点。 循环链表的遍历操作和单链表相同。</p>`,9),d=[l];function r(s,c){return n(),t("div",null,d)}const p=e(a,[["render",r],["__file","2.3线性表链式表示.html.vue"]]),u=JSON.parse('{"path":"/computer/dataStructure/2.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA.html","title":"2.3线性表链式表示","lang":"zh-CN","frontmatter":{"title":"2.3线性表链式表示","description":"单链表的定义 线性表的链式存储又称单链表。对每个结点，除存放自身数据外，还需要存放一个指向其后继的指针。 通常用头指针来标识一个单链表，头指针为null时表示一个空表。为了操作上的方便，在单链表第一个结点之前附加一个结点，成为头结点。头结点数据域可以不存任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个结点。 单链表的基本操作 双链表的基...","head":[["meta",{"property":"og:url","content":"https://lovethelife.github.io/MyBlog/computer/dataStructure/2.3%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:site_name","content":"异生"}],["meta",{"property":"og:title","content":"2.3线性表链式表示"}],["meta",{"property":"og:description","content":"单链表的定义 线性表的链式存储又称单链表。对每个结点，除存放自身数据外，还需要存放一个指向其后继的指针。 通常用头指针来标识一个单链表，头指针为null时表示一个空表。为了操作上的方便，在单链表第一个结点之前附加一个结点，成为头结点。头结点数据域可以不存任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个结点。 单链表的基本操作 双链表的基..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T02:54:05.000Z"}],["meta",{"property":"article:author","content":"山中人"}],["meta",{"property":"article:modified_time","content":"2024-06-09T02:54:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.3线性表链式表示\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T02:54:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"山中人\\"}]}"]]},"headers":[{"level":2,"title":"单链表的定义","slug":"单链表的定义","link":"#单链表的定义","children":[]},{"level":2,"title":"单链表的基本操作","slug":"单链表的基本操作","link":"#单链表的基本操作","children":[]},{"level":2,"title":"双链表的基本操作","slug":"双链表的基本操作","link":"#双链表的基本操作","children":[]},{"level":2,"title":"循环链表的基本操作","slug":"循环链表的基本操作","link":"#循环链表的基本操作","children":[]}],"git":{"createdTime":1717137137000,"updatedTime":1717901645000,"contributors":[{"name":"yqsy","email":"2156482589@qq.com","commits":2}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"computer/dataStructure/2.3线性表链式表示.md","localizedDate":"2024年5月31日","excerpt":"<h2>单链表的定义</h2>\\n<p>线性表的链式存储又称单链表。对每个结点，除存放自身数据外，还需要存放一个指向其后继的指针。\\n通常用头指针来标识一个单链表，头指针为null时表示一个空表。为了操作上的方便，在单链表第一个结点之前附加一个结点，成为头结点。头结点数据域可以不存任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个结点。</p>\\n<h2>单链表的基本操作</h2>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>1. 头插法\\n    步骤1. 创建新结点，新结点的指针域指向null。\\n    步骤2. 将新结点插入到头结点之后，头结点的指针域指向新结点。\\n2. 尾插法\\n    步骤1. 创建新结点，新结点的指针域指向null。\\n    步骤2. 尾结点的指针域指向新结点\\n3. 按序号查找指定值\\n    步骤1. 创建计数器\\n    步骤2. 从第一个节点比较，若计数器和序号相等，返回该结点\\n3. 按值查找序号\\n    步骤1. 依次比较指定值和每个结点的数据域，若相等，则返回该结点\\n4. 删除结点\\n    步骤1. 检查删除位置是否有效\\n    步骤2. 查找删除位置的前驱结点i-1，该结点的指针指向i+1\\n</code></pre></div>","autoDesc":true}');export{p as comp,u as data};
