import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,b as a}from"./app-B9xeI2rF.js";const n={},l=a(`<h2 id="顺序表的定义" tabindex="-1"><a class="header-anchor" href="#顺序表的定义"><span>顺序表的定义</span></a></h2><p>线性表的顺序存储结构称为顺序表。 线性表的顺序存储结构是一种随机存取的存储结构，通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。</p><h2 id="顺序表基本操作的实现" tabindex="-1"><a class="header-anchor" href="#顺序表基本操作的实现"><span>顺序表基本操作的实现</span></a></h2><ol><li>插入操作</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>步骤1. 确定插入位置i是否越界
步骤2. 确定顺序表存储空间是否已满
步骤3. 将第i个元素及之后的元素依次后移
步骤4. 将元素e插入到位置i中
步骤3. 顺序表长度加1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>删除操作</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>步骤1. 确定删除位置i是否越界
步骤2. 将第i个元素之后的元素依次前移
步骤3. 顺序表长度减1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>查找指定元素的位置</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>步骤1. 确定查找范围
步骤2. 和每一个元素比较，若相等则返回位置i
步骤3. 若查找范围为空，则返回-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),r=[l];function d(s,o){return i(),t("div",null,r)}const p=e(n,[["render",d],["__file","2.2线性表顺序表示.html.vue"]]),u=JSON.parse('{"path":"/computer/dataStructure/2.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA.html","title":"2.2线性表顺序表示","lang":"zh-CN","frontmatter":{"title":"2.2线性表顺序表示","description":"顺序表的定义 线性表的顺序存储结构称为顺序表。 线性表的顺序存储结构是一种随机存取的存储结构，通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。 顺序表基本操作的实现 插入操作 删除操作 查找指定元素的位置","head":[["meta",{"property":"og:url","content":"https://lovethelife.github.io/MyBlog/computer/dataStructure/2.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:site_name","content":"异生"}],["meta",{"property":"og:title","content":"2.2线性表顺序表示"}],["meta",{"property":"og:description","content":"顺序表的定义 线性表的顺序存储结构称为顺序表。 线性表的顺序存储结构是一种随机存取的存储结构，通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。 顺序表基本操作的实现 插入操作 删除操作 查找指定元素的位置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T02:54:05.000Z"}],["meta",{"property":"article:author","content":"山中人"}],["meta",{"property":"article:modified_time","content":"2024-06-09T02:54:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.2线性表顺序表示\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T02:54:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"山中人\\"}]}"]]},"headers":[{"level":2,"title":"顺序表的定义","slug":"顺序表的定义","link":"#顺序表的定义","children":[]},{"level":2,"title":"顺序表基本操作的实现","slug":"顺序表基本操作的实现","link":"#顺序表基本操作的实现","children":[]}],"git":{"createdTime":1717137137000,"updatedTime":1717901645000,"contributors":[{"name":"yqsy","email":"2156482589@qq.com","commits":2}]},"readingTime":{"minutes":0.89,"words":268},"filePathRelative":"computer/dataStructure/2.2线性表顺序表示.md","localizedDate":"2024年5月31日","excerpt":"<h2>顺序表的定义</h2>\\n<p>线性表的顺序存储结构称为顺序表。\\n线性表的顺序存储结构是一种随机存取的存储结构，通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。</p>\\n<h2>顺序表基本操作的实现</h2>\\n<ol>\\n<li>插入操作</li>\\n</ol>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>步骤1. 确定插入位置i是否越界\\n步骤2. 确定顺序表存储空间是否已满\\n步骤3. 将第i个元素及之后的元素依次后移\\n步骤4. 将元素e插入到位置i中\\n步骤3. 顺序表长度加1\\n</code></pre></div>","autoDesc":true}');export{p as comp,u as data};
