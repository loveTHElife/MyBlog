import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,b as l}from"./app-B9xeI2rF.js";const a={},i=l('<h2 id="_1-算法的概念" tabindex="-1"><a class="header-anchor" href="#_1-算法的概念"><span>1. 算法的概念</span></a></h2><p>算法是对特定问题求解步骤的一种描述，有限的指令序列，具有5个重要特性：</p><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h2 id="_2-算法效率" tabindex="-1"><a class="header-anchor" href="#_2-算法效率"><span>2. 算法效率</span></a></h2><h3 id="_2-1-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-1-时间复杂度"><span>2.1 时间复杂度</span></a></h3><p>一个算法是有控制流程(顺序、分支和循环)和基本运算(加减乘除等)组成，算法的执行时间由二者组成。 一个语句的频度是指该语句在算法中出现的次数。算法中所有语句的频度之和称为算法的总频度，记作T(n),其中n称为问题的规模。 算法的执行时间大致=基本运算所需时间xT(n)，所以T(n)和算法的执行时间成正比，因此用T(n)表示算法的执行时间 算法的执行时间T(n)是问题规模n的某个函数f(n):记作T(n)=O(f(n))，记号&quot;O&quot;读作大O 算法的时间复杂度主要分析T(n)的数量级，一般总是考虑最坏的时间复杂度。 常见的时间复杂度为: O(1)&lt;O(log2<sup>n</sup>)&lt;O(n)&lt;O(nlog2<sup>n</sup>)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</p><h3 id="_2-2-简化的时间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-2-简化的时间复杂度"><span>2.2 简化的时间复杂度</span></a></h3><p>算法中的基本操作一般是深处循环中的基本运算。 算法的执行时间大致=基本运算所需时间x其运算次数 所以在分析算法的时间复杂度时，只需分析基本运算的执行次数来表示算法的执行时间</p><h3 id="_2-3-空间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-3-空间复杂度"><span>2.3 空间复杂度</span></a></h3><p>一个算法在运行过程中临时占用存储空间大小的量度，记作S(n) 算法中需要借助于存储空间来保存临时数据，指局部变量。不包含输出、输出、程序本身所占空间 算法中所有语句的频度之和称为算法的总频度，记作S(n),其中n称为问题的规模，记作 S(n)=O(g(n))</p>',10),p=[i];function r(o,s){return n(),e("div",null,p)}const h=t(a,[["render",r],["__file","1.2算法分析.html.vue"]]),d=JSON.parse('{"path":"/computer/dataStructure/1.2%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html","title":"1.2算法分析","lang":"zh-CN","frontmatter":{"title":"1.2算法分析","description":"1. 算法的概念 算法是对特定问题求解步骤的一种描述，有限的指令序列，具有5个重要特性： 有穷性 确定性 可行性 输入 输出 2. 算法效率 2.1 时间复杂度 一个算法是有控制流程(顺序、分支和循环)和基本运算(加减乘除等)组成，算法的执行时间由二者组成。 一个语句的频度是指该语句在算法中出现的次数。算法中所有语句的频度之和称为算法的总频度，记作T(...","head":[["meta",{"property":"og:url","content":"https://lovethelife.github.io/MyBlog/computer/dataStructure/1.2%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"异生"}],["meta",{"property":"og:title","content":"1.2算法分析"}],["meta",{"property":"og:description","content":"1. 算法的概念 算法是对特定问题求解步骤的一种描述，有限的指令序列，具有5个重要特性： 有穷性 确定性 可行性 输入 输出 2. 算法效率 2.1 时间复杂度 一个算法是有控制流程(顺序、分支和循环)和基本运算(加减乘除等)组成，算法的执行时间由二者组成。 一个语句的频度是指该语句在算法中出现的次数。算法中所有语句的频度之和称为算法的总频度，记作T(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T06:32:17.000Z"}],["meta",{"property":"article:author","content":"山中人"}],["meta",{"property":"article:modified_time","content":"2024-05-31T06:32:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2算法分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-31T06:32:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"山中人\\"}]}"]]},"headers":[{"level":2,"title":"1. 算法的概念","slug":"_1-算法的概念","link":"#_1-算法的概念","children":[]},{"level":2,"title":"2. 算法效率","slug":"_2-算法效率","link":"#_2-算法效率","children":[{"level":3,"title":"2.1 时间复杂度","slug":"_2-1-时间复杂度","link":"#_2-1-时间复杂度","children":[]},{"level":3,"title":"2.2 简化的时间复杂度","slug":"_2-2-简化的时间复杂度","link":"#_2-2-简化的时间复杂度","children":[]},{"level":3,"title":"2.3 空间复杂度","slug":"_2-3-空间复杂度","link":"#_2-3-空间复杂度","children":[]}]}],"git":{"createdTime":1717137137000,"updatedTime":1717137137000,"contributors":[{"name":"yqsy","email":"2156482589@qq.com","commits":1}]},"readingTime":{"minutes":1.72,"words":516},"filePathRelative":"computer/dataStructure/1.2算法分析.md","localizedDate":"2024年5月31日","excerpt":"<h2>1. 算法的概念</h2>\\n<p>算法是对特定问题求解步骤的一种描述，有限的指令序列，具有5个重要特性：</p>\\n<ul>\\n<li>有穷性</li>\\n<li>确定性</li>\\n<li>可行性</li>\\n<li>输入</li>\\n<li>输出</li>\\n</ul>\\n<h2>2. 算法效率</h2>\\n<h3>2.1 时间复杂度</h3>\\n<p>一个算法是有控制流程(顺序、分支和循环)和基本运算(加减乘除等)组成，算法的执行时间由二者组成。\\n一个语句的频度是指该语句在算法中出现的次数。算法中所有语句的频度之和称为算法的总频度，记作T(n),其中n称为问题的规模。\\n算法的执行时间大致=基本运算所需时间xT(n)，所以T(n)和算法的执行时间成正比，因此用T(n)表示算法的执行时间\\n算法的执行时间T(n)是问题规模n的某个函数f(n):记作T(n)=O(f(n))，记号\\"O\\"读作大O\\n算法的时间复杂度主要分析T(n)的数量级，一般总是考虑最坏的时间复杂度。\\n常见的时间复杂度为:\\nO(1)&lt;O(log2<sup>n</sup>)&lt;O(n)&lt;O(nlog2<sup>n</sup>)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</p>","autoDesc":true}');export{h as comp,d as data};
